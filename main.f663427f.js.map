{"version":3,"sources":["scripts/main.js"],"names":["board","boardSize","score","gameOver","gameStarted","startButton","document","querySelector","restartButton","scoreEl","startMessage","winMessage","loseMessage","gameBoard","rows","querySelectorAll","startGame","resetGame","generateRandomTile","upDateBoard","initializedBoard","restartGame","hideElem","changeKey","evt","preventDefault","key","moveUp","moveDown","moveLeft","moveRight","row","col","push","merged","currentCell","nextCellIsEmpty","canMerge","emptyCells","length","randomIndex","randomCell","Math","floor","random","randomNumber","isGameOver","innerHTML","forEach","indexRow","cell","indexCol","cellValue","textContent","classList","remove","add","showElem","removeEventListener","elem","toggleButton","btnToHide","btnToShow","addEventListener"],"mappings":"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","file":"main.f663427f.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nlet board = [];\nconst boardSize = 4;\nlet score = 0;\nlet gameOver = false;\nlet gameStarted = false;\n\nconst startButton = document.querySelector('.start');\nconst restartButton = document.querySelector('.restart');\nconst scoreEl = document.querySelector('.game-score');\n\nconst startMessage = document.querySelector('.message.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\n\nconst gameBoard = document.querySelector('.game-field');\nconst rows = gameBoard.querySelectorAll('.field-row');\n\ndocument.addEventListener('keydown', changeKey);\n\nstartButton.addEventListener('click', () => {\n  toggleButton(startButton, restartButton);\n  hideElem(startMessage);\n  startGame();\n});\n\nrestartButton.addEventListener('click', () => {\n  restartGame();\n});\n\nfunction startGame() {\n  resetGame();\n  generateRandomTile();\n  generateRandomTile();\n  upDateBoard();\n\n  gameStarted = true;\n}\n\nfunction resetGame() {\n  board = [];\n  initializedBoard();\n  score = 0;\n  gameOver = false;\n}\n\nfunction restartGame() {\n  startGame();\n  hideElem(loseMessage);\n}\n\nfunction changeKey(evt) {\n  evt.preventDefault();\n\n  if (!gameOver && gameStarted) {\n    switch (evt.key) {\n      case 'ArrowUp':\n        moveUp();\n        break;\n\n      case 'ArrowDown':\n        moveDown();\n        break;\n\n      case 'ArrowLeft':\n        moveLeft();\n        break;\n\n      case 'ArrowRight':\n        moveRight();\n        break;\n\n      default:\n        break;\n    }\n\n    generateRandomTile();\n\n    if (!gameOver) {\n      upDateBoard();\n    }\n  }\n}\n\nfunction initializedBoard() {\n  for (let row = 0; row < boardSize; row++) {\n    board[row] = [];\n\n    for (let col = 0; col < boardSize; col++) {\n      board[row].push(0);\n    }\n  }\n}\n\nfunction moveUp() {\n  let merged = false;\n\n  for (let col = 0; col < boardSize; col++) {\n    for (let row = 0; row < boardSize; row++) {\n      const currentCell = board[row][col];\n\n      merged = false;\n\n      if (currentCell !== 0) {\n        while (row > 0) {\n          const nextCellIsEmpty = board[row - 1][col] === 0;\n          const canMerge = (board[row - 1][col] === board[row][col] && !merged);\n\n          if (nextCellIsEmpty) {\n            board[row - 1][col] = board[row][col];\n            board[row][col] = 0;\n            row--;\n          } else if (canMerge) {\n            board[row - 1][col] *= 2;\n            board[row][col] = 0;\n            score += board[row - 1][col];\n            merged = true;\n            row--;\n            break;\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction moveDown() {\n  let merged = false;\n\n  for (let col = 0; col < boardSize; col++) {\n    for (let row = boardSize - 1; row >= 0; row--) {\n      const currentCell = board[row][col];\n\n      merged = false;\n\n      if (currentCell !== 0) {\n        while (row < boardSize - 1) {\n          const nextCellIsEmpty = board[row + 1][col] === 0;\n          const canMerge = board[row + 1][col] === board[row][col] && !merged;\n\n          if (nextCellIsEmpty) {\n            board[row + 1][col] = board[row][col];\n            board[row][col] = 0;\n            merged = false;\n            row++;\n          } else if (canMerge) {\n            board[row + 1][col] *= 2;\n            board[row][col] = 0;\n            score += board[row + 1][col];\n            merged = true;\n            row++;\n            break;\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction moveRight() {\n  let merged = false;\n\n  for (let row = 0; row < boardSize; row++) {\n    for (let col = boardSize - 1; col >= 0; col--) {\n      const currentCell = board[row][col];\n\n      merged = false;\n\n      if (currentCell !== 0) {\n        while (col < boardSize - 1) {\n          const nextCellIsEmpty = board[row][col + 1] === 0;\n          const canMerge = board[row][col + 1] === board[row][col] && !merged;\n\n          if (nextCellIsEmpty) {\n            board[row][col + 1] = board[row][col];\n            board[row][col] = 0;\n            merged = false;\n            col++;\n          } else if (canMerge) {\n            board[row][col + 1] *= 2;\n            board[row][col] = 0;\n            score += board[row][col + 1];\n            merged = true;\n            col++;\n            break;\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction moveLeft() {\n  let merged = false;\n\n  for (let row = 0; row < boardSize; row++) {\n    for (let col = 0; col < boardSize; col++) {\n      const currentCell = board[row][col];\n\n      merged = false;\n\n      if (currentCell !== 0) {\n        while (col > 0) {\n          const nextCellIsEmpty = board[row][col - 1] === 0;\n          const canMerge = board[row][col - 1] === board[row][col] && !merged;\n\n          if (nextCellIsEmpty) {\n            board[row][col - 1] = board[row][col];\n            board[row][col] = 0;\n            merged = false;\n            col--;\n          } else if (canMerge) {\n            board[row][col - 1] *= 2;\n            board[row][col] = 0;\n            score += board[row][col - 1];\n            merged = true;\n            col--;\n            break;\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction generateRandomTile() {\n  const emptyCells = [];\n\n  for (let row = 0; row < boardSize; row++) {\n    for (let col = 0; col < boardSize; col++) {\n      if (board[row][col] === 0) {\n        emptyCells.push({\n          row,\n          col,\n        });\n      }\n    }\n  }\n\n  if (emptyCells.length > 0) {\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n    const randomCell = emptyCells[randomIndex];\n    const randomNumber = Math.random() < 0.9 ? 2 : 4;\n\n    board[randomCell.row][randomCell.col] = randomNumber;\n  } else {\n    isGameOver();\n  }\n}\n\nfunction upDateBoard() {\n  scoreEl.innerHTML = score;\n\n  rows.forEach((row, indexRow) => {\n    const cells = row.querySelectorAll('.field-cell');\n\n    cells.forEach((cell, indexCol) => {\n      const cellValue = board[indexRow][indexCol];\n\n      if (cell.textContent) {\n        cell.classList.remove(`field-cell--${cell.textContent}`);\n      }\n\n      if (cellValue) {\n        cell.classList.add(`field-cell--${cellValue}`);\n      }\n\n      cell.textContent = cellValue > 0 ? cellValue : '';\n\n      if (cellValue === 2048) {\n        showElem(winMessage);\n        document.removeEventListener('keydown', changeKey);\n      }\n    });\n  });\n}\n\nfunction isGameOver() {\n  // Check for possible merges\n  for (let row = 0; row < boardSize; row++) {\n    for (let col = 0; col < boardSize; col++) {\n      // Check adjacent cells (up, down, left, right)\n      const currentCell = board[row][col];\n\n      if (\n        (row > 0 && board[row - 1][col] === currentCell)\n        || (row < boardSize - 1 && board[row + 1][col] === currentCell)\n        || (col > 0 && board[row][col - 1] === currentCell)\n        || (col < boardSize - 1 && board[row][col + 1] === currentCell)\n      ) {\n        return;\n      }\n    }\n  }\n\n  gameOver = true;\n  showElem(loseMessage);\n}\n\nfunction showElem(elem) {\n  elem.classList.remove('hidden');\n}\n\nfunction hideElem(elem) {\n  elem.classList.add('hidden');\n}\n\nfunction toggleButton(btnToHide, btnToShow) {\n  hideElem(btnToHide);\n  showElem(btnToShow);\n}\n"]}